- name: Install packages for v4l2rtspserver build
  hosts: "{{ host }}"
  become: true
  tags: packages
  tasks:
    - name: Print Distribution name
      debug:
        msg: Distribution "{{ ansible_distribution }}"

    - name: Install Arch Linux Packages
      community.general.pacman:
        pkg:
          - alsa-lib
          - extra/alsa-card-profiles
          - extra/alsa-plugins
          - extra/alsa-utils
          - extra/alsa-firmware
          - make
          - cmake
          - git
          - live-media
          - extra/pulseaudio-alsa
          # Needed to find ids for usb camera
          - usbutils
        state: latest
      when: ansible_distribution == 'Archlinux'

    - name: Update apt cache then update all packages
      ansible.builtin.apt:
        update_cache: true
        name: "*"
        state: latest
      when: ansible_distribution == 'Raspian'

    - name: Install required packages and tools
      apt:
        pkg:
          # Debian 11 podman v3 is too old to build this Dockerfile
          - libv4l-0
          - libasound2
          - libasound2-plugin-equal
          - libssl-dev
          - liblog4cpp5v5
          - libssl1.1
          - alsa-firmware-loaders
          - ca-certificates
          - liblivemedia-dev
          # Packages required for building from source
          - libasound2-dev
          - liblog4cpp5v5
          - liblog4cpp5-dev
          # Latest liblivemedia-dev will be cloned if missing
          - liblivemedia-dev
          - libv4l-dev
          - git
          - make
          - cmake
          - gcc
          - build-essential
          # Useful tools
          - vim
          - htop
          - alsa-tools
          - alsa-utils
      when: ansible_distribution == 'Raspian'

    - name: Remove unused dependencies
      apt:
        autoremove: true
      when: ansible_distribution == 'Raspian'

- name: Create ssl certificates for RTSPS & SRTP
  hosts: "{{ host }}"
  vars_files: 
    - group_vars/certificates.yml
  become: true
  tags: certificates

  tasks:
    - name: Create "{{ keyPath }}"
      file:
        path: "{{ keyPath }}"
        state: directory
        mode: 0760
    
    - name: Create "{{ certPath }}"
      file:
        path: "{{ certPath }}"
        state: directory
        mode: 0760

    - name: Generate openssl certificate key
      command:
        openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -out "{{ key }}"
    
    - name: Generate openssl self signed certificate
      command:
        openssl req -key "{{ key }}" -x509 -new -days 365 -out "{{ cert }}" -subj "/C={{ certProps.C }}/ST={{ certProps.ST }}/L={{ certProps.L }}/O={{ certProps.O }}/OU={{ certProps.OU }}/CN={{ inventory_hostname }}/emailAddress={{ certProps.email }}"

- name: Build and Install v4l2rtspserver
  hosts: "{{ host }}"
  become: false
  tags: build

  tasks:
    - name: Git clone github.com/mpromonet/v4l2rtspserver
      git:
        repo: https://github.com/mpromonet/v4l2rtspserver.git
        dest: /tmp/v4l2rtspserver
        clone: true
        update: false
        version: v0.3.3

    - name: Build v4l2rtspserver from source
      shell: cmake . && make -j"$(nproc)"
      args:
        chdir: /tmp/v4l2rtspserver
      register: build_output
      changed_when: false
    - debug: var=build_output.stdout_lines

    - name: make install
      command:
        make install
      args:
        chdir: /tmp/v4l2rtspserver
      register: install_output
      become: true
    - debug: var=install_output.stdout_lines

    - name: Remove /tmp/v4l2rtspserver
      file:
        state: absent
        path: /tmp/v4l2rtspserver

- name: Udev Setup
  hosts: "{{ host }}"
  tags: udev-rules

  tasks:
    - name: Find usb camera product id
      script: scripts/findDevIds.sh product
      register: idProduct

    - name: Find usb camera vendor id
      script: scripts/findDevIds.sh vendor
      register: idVendor

    - name: Store usb ids
      set_fact: 
        idProduct: "{{ idProduct.stdout | trim }}"
        idVendor: "{{ idVendor.stdout | trim }}"

    - name: Install udev rules for usb cameras
      template:
        src: templates/system/udev/rules.d/99-usb-cam.rules.j2
        dest: /etc/udev/rules.d/99-usb-cam.rules
        backup: true
        mode: 0644

    - name: Reload udev and trigger udev rules
      shell: udevadm control --reload-rules && udevadm trigger

- name: Install v4l2rtspserver
  hosts: "{{ host }}"
  vars_files: 
    - group_vars/certificates.yml
  vars:
    rtsp:
      url: "{{ url }}"
  become: true
  tags: install

  tasks:
    - name: Install v4l2rtspserver.service systemd unit
      template:
        src: templates/v4l2rtspserver/v4l2rtspserver.service.j2
        dest: /usr/lib/systemd/system/v4l2rtspserver.service
        mode: 0644
    
    - name: Install v4l2rtspserver arguements to /usr/local/etc/v4l2rtspserver.env
      template:
        src: templates/v4l2rtspserver/v4l2rtspserver.env.j2
        dest: /usr/local/etc/v4l2rtspserver.env
        mode: 0644

    - name: Enable/Restart v4l2rtspserver systemd unit
      systemd:
        name: v4l2rtspserver
        state: restarted
        enabled: true
        daemon_reload: true

      # TODO find a way to script turning mic capture on for camera device
      # amixer -c 0 cset numid=2 1
      # amixer cset numid=3 53
