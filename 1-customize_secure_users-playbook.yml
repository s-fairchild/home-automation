- name: Secure Install
  hosts: rpi4
  vars_files:
    - group_vars/env.yml
  become: true

  tasks:
    - name: Set hostname
      hostname:
        name: rpi4
        use: systemd
    
    - name: Disable systemd-resolved
      systemd:
        name: systemd-resolved
        state: stopped
        enabled: false
    
    - name: Install resolv.conf
      template:
        src: templates/system/resolv.conf.j2
        dest: /etc/resolv.conf
        owner: root
        mode: '0644'

    - name: Create user account
      ansible.builtin.user:
        name: "{{ user }}"
        shell: '/bin/bash'
        expires: -1
        append: true
        groups:
          - wheel
          # - power
          - audio
          - tty
          - video
          # - i2c
        generate_ssh_key: true

    - name: Add authorized ssh key for "{{ user }}"
      ansible.posix.authorized_key:
        user: "{{ user }}"
        state: present
        key: "{{ lookup('file', home + '/.ssh/id_rsa.pub') }}"
      tags: ssh-config

    - name: Customize set aliases for root
      blockinfile:
        path: /root/.bashrc
        owner: root
        group: root
        mode: 0644
        create: true
        block: |
          alias ls='ls --color=auto'
          alias ll='ls -lhtr --color=auto'
      tags: shell-env
      when: ansible_distribution == 'Arch Linux'

    - name: Customize bash profile for root
      blockinfile:
        path: /root/.bash_profile
        owner: root
        group: root
        mode: 0644
        create: true
        block: |
          # Get the aliases and functions
          if [ -f ~/.bashrc ]; then
              . ~/.bashrc
          fi
      tags: shell-env
      when: ansible_distribution == 'Arch Linux'

    - name: Remove old PS1 variable for "{{ user }}"
      lineinfile:
        path: "{{ user_home }}/.bashrc"
        regexp: '^PS1='
        state: absent
      when: ansible_distribution == 'Archlinux'

    ### Arch Linux Setup ###

    - name: Customize bash profile for "{{ user }}"
      blockinfile:
        path: "{{ user_home }}/.bash_profile"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: 0644
        create: true
        block: |
          # Get the aliases and functions
          if [ -f ~/.bashrc ]; then
              . ~/.bashrc
          fi
      tags: shell-env
      when: ansible_distribution == 'Archlinux'

    - name: Customize bash env for "{{ user }}"
      blockinfile:
        path: "{{ user_home }}/.bashrc"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: 0644
        create: true
        block: |
          PS1='[\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w \$\[\033[00m]\$ '
          export PATH="${PATH}:$HOME/.local/bin:$HOME/bin:/usr/local/go/bin"
          alias ll='ls -lhtr --color=auto'
      tags: shell-env
      when: ansible_distribution == 'Archlinux'

    - name: Install sudo
      community.general.pacman:
        update_cache: yes
        pkg:
          - sudo
        extra_args: --needed
      when: ansible_distribution == 'Archlinux'

    - name: Create sudoers.d
      file:
        state: directory
        owner: root
        group: root
        mode: '750'
        path: /etc/sudoers.d/
      when: ansible_distribution == 'Archlinux'

    - name: Install sudoers file
      template:
        src: templates/system/sudoers.d/user_nopasswd.j2
        dest: /etc/sudoers.d/user_nopasswd
        mode: '600'
        owner: root
        group: root
        force: true
        validate: visudo -csf %s
      when: ansible_distribution == 'Archlinux'

    # Switch logged in user from alarm to new user
    - name: switch to new user "{{ user }}"
      set_fact:
        current_user: "{{ user }}"
        ansible_user: "{{ user }}"
      when: ansible_distribution == 'Arch Linux'
      when: ansible_distribution == 'Archlinux'

    - name: Remove default alarm user
      user:
        name: alarm
        state: absent
        remove: true
        force: true
      when: ansible_distribution == 'Arch Linux'
      when: ansible_distribution == 'Archlinux'

    ### Low level hardware setup begin

    # Creates a backup regardless of file difference to the custom installed config files
    # Using this rather than backup: true because FAT32 doesn't support the backup filename of copy module

    - name: Create boot backup directory
      file:
        path: /root/boot_backup
        state: directory
        mode: '0700'
      when: ansible_distribution == 'Archlinux'

    - name: Backup config.txt
      shell:
        chdir: /root/boot_backup
        cmd: |
          cp /boot/config.txt config.txt_"$(date +%F-%T)"~
          chmod 0640 ./*.txt*~
      tags: hw-config
      when: ansible_distribution == 'Archlinux'

    - name: Backup cmdline.txt
      shell:
        chdir: /root/boot_backup
        cmd: |
          cp /boot/cmdline.txt cmdline.txt_"$(date +%F-%T)"~
          chmod 0640 ./*.txt*~
      when: ansible_distribution == 'Archlinux'

    - name: Allow video group to access vchiq (video core)
      copy:
        src: templates/system/udev/rules.d/10-vchiq-permissions.rules
        dest: /etc/udev/rules.d/10-vchiq-permissions.rules
        owner: root
        group: root
        mode: '0622'
      tags: hw-config
      when: ansible_distribution == 'Archlinux'

    - name: Install config.txt
      copy:
        src: templates/system/boot/config.txt
        dest: /boot/config.txt
        owner: root
        group: root
      tags: hw-config
      when: ansible_distribution == 'Archlinux'
    
    - name: Install cmdline.txt
      copy:
        src: templates/system/boot/cmdline.txt
        dest: /boot/cmdline.txt
        owner: root
        group: root
      tags: hw-config
      when: ansible_distribution == 'Archlinux'
    
    ### Low level hardware setup end

    - name: Do not allow password authentication to ssh
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication '
        insertafter: '^#PasswordAuthentication '
        line: PasswordAuthentication no
      tags: ssh-config

    - name: Restart sshd
      service:
        name: sshd
        state: restarted
      tags: ssh-config

    - name: Disable and lock root password
      user:
        name: root
        password: "!"
        password_lock: true
